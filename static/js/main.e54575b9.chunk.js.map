{"version":3,"sources":["views/mp3/index.jsx","App.js","reportWebVitals.js","redux/types.js","redux/reducers/login.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["cdThum","currentIndexSong","isRepeat","isRandom","idSongPlayed","$","document","querySelector","bind","Mp3","getSong","index","image","data","links","images","url","name","author","path","id","useState","isPlaying","setIsPlaying","song","setSong","formatSenconds","seconds","parseInt","moment","duration","minutes","toString","padStart","useEffect","audio","progress","currentTimeSpan","durationTimeSpan","src","startAnimation","ontimeupdate","textContent","isNaN","value","currentTime","console","log","play","onNextSong","check","undefined","dashboardCD","animate","transform","iterations","Infinity","pause","length","Math","floor","random","includes","push","setAttribute","className","slice","alt","onClick","btnRepeat","classList","add","remove","btnRandom","type","step","min","max","onChange","event","tempTime","target","map","itemSong","songSelected","onSelectSong","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ACTION_TYPES","initialState","inforLogin","LoginReducer","state","action","appReducer","combineReducers","rootReducer","logger","createLogger","diff","collapsed","store","createStore","applyMiddleware","thunk","getState","ReactDOM","render","StrictMode","getElementById"],"mappings":"6s9BAUIA,E,4FALAC,EAAmB,EACnBC,GAAW,EACXC,GAAW,EACXC,EAAe,GACbC,EAAIC,SAASC,cAAcC,KAAKF,UAmPvBG,EAhPH,WACV,IAAMC,EAAU,SAACC,GACf,MAAO,CACLC,MAAOC,EAAKF,GAAOG,MAAMC,OAAO,GAAGC,IACnCC,KAAMJ,EAAKF,GAAOM,KAClBC,OAAQL,EAAKF,GAAOO,OACpBC,KAAMN,EAAKF,GAAOK,IAClBI,GAAIP,EAAKF,GAAOS,KAPJ,EAUkBC,oBAAS,GAV3B,mBAUTC,EAVS,KAUEC,EAVF,OAWQF,mBAASX,EAAQ,IAXzB,mBAWTc,EAXS,KAWHC,EAXG,KAaVC,EAAiB,SAACC,GAUtB,OATAA,EAAUC,SAASD,GAEjBE,IACGC,SAASH,EAAS,WAClBI,UACAC,WACAC,SAAS,EAAG,KACf,IACAJ,IAAOC,SAASH,EAAS,WAAWA,UAAUK,WAAWC,SAAS,EAAG,MAIzEC,qBAAU,WACR,IAAMC,EAAQ9B,EAAE,SACV+B,EAAW/B,EAAE,aACbgC,EAAkBhC,EAAE,iBACpBiC,EAAmBjC,EAAE,kBAC3B8B,EAAMI,IAAMf,EAAKL,KACjBqB,IACAL,EAAMM,aAAe,WACnBH,EAAiBI,YAAchB,EAAeS,EAAML,UAAY,KAC3Da,MAAMR,EAAML,WAefM,EAASQ,MAAQ,EACjBP,EAAgBK,YAAc,SAf1BP,EAAMU,aAAeV,EAAML,UAC7BgB,QAAQC,IAAI,WAAY7C,GACnBA,EAKHiC,EAAMa,QAJNC,EAAW9C,GACXiC,EAASQ,MAAQ,EACjBP,EAAgBK,YAAc,WAKhCN,EAASQ,MAAST,EAAMU,YAAcV,EAAML,SAAY,IACxDO,EAAgBK,YAAchB,EAAeS,EAAMU,iBAOxD,IAEH,IAAML,EAAiB,SAACU,GACtB,QAAcC,IAAVD,EAAqB,CACvB,IAAIE,EAAc/C,EAAE,iBACpBL,EAASoD,EAAYC,QAAQ,CAAC,CAAEC,UAAW,mBAAqB,CAC9DxB,SAAU,IACVyB,WAAYC,MAGXN,EACAlD,EAAOgD,OADAhD,EAAOyD,SAkBfR,EAAa,SAAC9C,GAElB,GADIC,EAAasD,SAAW7C,EAAK6C,SAAQtD,EAAe,IACpDD,EAEF,GACEF,EAAmB0D,KAAKC,MAAsB,GAAhBD,KAAKE,gBAC5BzD,EAAa0D,SAAS7D,SAE/BA,IAEF,IAAMkC,EAAQ9B,EAAE,SACZJ,GAAoBY,EAAK6C,SAAQzD,EAAmB,GACxDG,EAAa2D,KAAKrD,EAAQT,GAAkBmB,IAC5Ce,EAAM6B,aAAa,MAAOtD,EAAQT,GAAkBkB,MACpDgB,EAAMa,OACNvB,EAAQf,EAAQT,IAChBsB,GAAa,IAyDf,OACE,sBAAK0C,UAAU,mBAAf,UACE,sBAAKA,UAAU,YAAf,UAEE,sBAAKA,UAAU,mBAAf,UACE,4EACA,6BACGzC,EAAKP,KAAKyC,OAAS,GAAKlC,EAAKP,KAAKiD,MAAM,EAAG,IAAM,MAAQ1C,EAAKP,UAInE,qBAAKgD,UAAU,eAAf,SACE,qBAAK1B,IAAKf,EAAKZ,MAAOuD,IAAI,OAG5B,sBAAKF,UAAU,UAAf,UACE,qBAAKA,UAAU,iBAAiBG,QA1BnB,WACnBlE,GAAYA,EACZ,IAAMmE,EAAYhE,EAAE,eAChBH,EACFmE,EAAUC,UAAUC,IAAI,UAExBF,EAAUC,UAAUE,OAAO,WAoBvB,SACE,mBAAGP,UAAU,kBAEf,qBAAKA,UAAU,eAAeG,QAzEnB,WACjB,IAAMjC,EAAQ9B,EAAE,WAChBJ,EACuB,IAAGA,EAAmBY,EAAK6C,OAAS,GAC3DvB,EAAM6B,aAAa,MAAOtD,EAAQT,GAAkBkB,MACpDgB,EAAMa,OACNvB,EAAQf,EAAQT,IAChBsB,GAAa,IAkEP,SACE,mBAAG0C,UAAU,2BAEf,qBAAKA,UAAU,sBAAsBG,QA7GhB,WAC3B,IAAMjC,EAAQ9B,EAAE,SACXsC,MAAMR,EAAML,YACVR,GAIHa,EAAMsB,QACNjB,GAAe,KAJfL,EAAMa,OACNR,GAAe,IAKjBjB,GAAcD,KAmGV,SACGA,EACC,mBAAG2C,UAAU,4BAEb,mBAAGA,UAAU,4BAGjB,qBAAKA,UAAU,eAAeG,QAAS,kBAAMnB,EAAW9C,IAAxD,SACE,mBAAG8D,UAAU,0BAEf,qBAAKA,UAAU,iBAAiBG,QApDnB,WACnBjE,GAAYA,EACZ,IAAMsE,EAAYpE,EAAE,eAChBF,EACFsE,EAAUH,UAAUC,IAAI,UAExBE,EAAUH,UAAUE,OAAO,WA8CvB,SACE,mBAAGP,UAAU,uBAIjB,uBACE7C,GAAG,WACH6C,UAAU,WACVS,KAAK,QACLC,KAAK,IACLC,IAAI,IACJC,IAAI,MACJC,SA3EY,SAACC,GACnB,IAAM5C,EAAQ9B,EAAE,SAChB,IAAKsC,MAAMR,EAAML,UAAW,CAC1B,IAAMkD,EAAY7C,EAAML,SAAWiD,EAAME,OAAOrC,MAAS,IACzDT,EAAMU,YAAcmC,EAChB1D,GACFa,EAAMa,WAuEN,sBAAKiB,UAAU,OAAf,UACE,sBAAMA,UAAU,eAAhB,mBACA,sBAAMA,UAAU,gBAAhB,sBAGF,uBAAO7C,GAAG,QAAQmB,IAAI,QAGxB,qBAAK0B,UAAU,aAAf,SACGpD,EAAKqE,KAAI,SAACC,EAAUxE,GACnB,OACE,sBACEyD,QAAS,kBAtGA,SAACzD,GACpB,IAAMwB,EAAQ9B,EAAE,SACZ+E,EAAe1E,EAAQC,GACvByE,EAAahE,KAAOI,EAAKJ,KAC3Be,EAAM6B,aAAa,MAAOoB,EAAajE,MACvCgB,EAAMa,OACNvB,EAAQ2D,GACR7D,GAAa,GACbiB,GAAe,GACfvC,EAAmBU,GA6FI0E,CAAa1E,IAC5BsD,UAAS,oBAAezC,EAAKJ,KAAO+D,EAAS/D,GAAK,SAAW,IAF/D,UAKE,qBAAK6C,UAAU,kBAAf,SACE,qBAAK1B,IAAK4C,EAASrE,MAAMC,OAAO,GAAGC,IAAKmD,IAAI,OAE9C,sBAAKF,UAAU,oBAAf,UACE,qBAAIA,UAAU,QAAd,UACGkB,EAASlE,KAAKyC,OAAS,GACpByB,EAASlE,KAAKiD,MAAM,EAAG,IAAM,MAC7BiB,EAASlE,KAAM,IAHrB,KAIKkE,EAAS/D,GAAK,KAEnB,mBAAG6C,UAAU,SAAb,SAAuBkB,EAASjE,YAElC,qBAAK+C,UAAU,mBAAf,SACE,mBAAGA,UAAU,0BAfVkB,EAAS/D,aC3NbkE,EAJH,WACV,OAAO,cAAC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qCCPDQ,EACF,QCCLC,EAAe,CACjBC,WAAY,IAeDC,EAZM,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACnD,OAAQA,EAAO3B,MACX,KAAKsB,EACD,OAAO,2BACAI,GADP,IAEIF,WAAYG,EAAOH,aAE3B,QACI,OAAOE,ICXbE,EAAaC,YAAgB,CAC/BJ,iBAMWK,EAJK,SAACJ,EAAOC,GACxB,OAAOC,EAAWF,EAAOC,I,gBCDvBI,EAASC,uBAAa,CAAEC,MAAM,EAAMC,WAAW,IAE/CC,EAAQC,YAAYN,EAJL,GAIgCO,YAAgBC,IAAOP,IAE5E3D,QAAQC,IAAI,gBAAiB8D,EAAMI,YACpBJ,QCDfK,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,IAAMO,WAAP,UACE,cAAC,EAAD,QAGJ9G,SAAS+G,eAAe,SAE1B9B,M","file":"static/js/main.e54575b9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport data from \"./songs.json\";\r\nimport moment from \"moment\";\r\n\r\nlet currentIndexSong = 0;\r\nlet isRepeat = false;\r\nlet isRandom = false;\r\nlet idSongPlayed = [];\r\nconst $ = document.querySelector.bind(document);\r\nlet cdThum;\r\n\r\nconst Mp3 = () => {\r\n  const getSong = (index) => {\r\n    return {\r\n      image: data[index].links.images[0].url,\r\n      name: data[index].name,\r\n      author: data[index].author,\r\n      path: data[index].url,\r\n      id: data[index].id,\r\n    };\r\n  };\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [song, setSong] = useState(getSong(0));\r\n\r\n  const formatSenconds = (seconds) => {\r\n    seconds = parseInt(seconds); //because moment js dont know to handle number in string format\r\n    let format =\r\n      moment\r\n        .duration(seconds, \"seconds\")\r\n        .minutes()\r\n        .toString()\r\n        .padStart(2, \"0\") +\r\n      \":\" +\r\n      moment.duration(seconds, \"seconds\").seconds().toString().padStart(2, \"0\");\r\n    return format;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const audio = $(\"audio\");\r\n    const progress = $(\"#progress\");\r\n    const currentTimeSpan = $(\".current-time\");\r\n    const durationTimeSpan = $(\".duration-time\");\r\n    audio.src = song.path;\r\n    startAnimation();\r\n    audio.ontimeupdate = () => {\r\n      durationTimeSpan.textContent = formatSenconds(audio.duration || 300);\r\n      if (!isNaN(audio.duration)) {\r\n        if (audio.currentTime >= audio.duration) {\r\n          console.log(\"isRepeat\", isRepeat);\r\n          if (!isRepeat) {\r\n            onNextSong(isRandom);\r\n            progress.value = 0;\r\n            currentTimeSpan.textContent = \"00:00\";\r\n          } else {\r\n            audio.play();\r\n          }\r\n        } else {\r\n          progress.value = (audio.currentTime / audio.duration) * 100;\r\n          currentTimeSpan.textContent = formatSenconds(audio.currentTime);\r\n        }\r\n      } else {\r\n        progress.value = 0;\r\n        currentTimeSpan.textContent = \"00:00\";\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const startAnimation = (check) => {\r\n    if (check === undefined) {\r\n      let dashboardCD = $(\".dashboard-cd\");\r\n      cdThum = dashboardCD.animate([{ transform: \"rotate(360deg)\" }], {\r\n        duration: 10000,\r\n        iterations: Infinity,\r\n      });\r\n    }\r\n    if (!check) cdThum.pause();\r\n    else cdThum.play();\r\n  };\r\n\r\n  const onTogglePlayAndPause = () => {\r\n    const audio = $(\"audio\");\r\n    if (!isNaN(audio.duration)) {\r\n      if (!isPlaying) {\r\n        audio.play();\r\n        startAnimation(true);\r\n      } else {\r\n        audio.pause();\r\n        startAnimation(false);\r\n      }\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  };\r\n\r\n  const onNextSong = (isRandom) => {\r\n    if (idSongPlayed.length === data.length) idSongPlayed = [];\r\n    if (isRandom) {\r\n      // idSongPlayed\r\n      do {\r\n        currentIndexSong = Math.floor(Math.random() * 85);\r\n      } while (idSongPlayed.includes(currentIndexSong));\r\n    } else {\r\n      currentIndexSong++;\r\n    }\r\n    const audio = $(\"audio\");\r\n    if (currentIndexSong >= data.length) currentIndexSong = 0;\r\n    idSongPlayed.push(getSong(currentIndexSong).id);\r\n    audio.setAttribute(\"src\", getSong(currentIndexSong).path);\r\n    audio.play();\r\n    setSong(getSong(currentIndexSong));\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  const onPrevSong = () => {\r\n    const audio = $(\"audio\");\r\n    currentIndexSong--;\r\n    if (currentIndexSong < 0) currentIndexSong = data.length - 1;\r\n    audio.setAttribute(\"src\", getSong(currentIndexSong).path);\r\n    audio.play();\r\n    setSong(getSong(currentIndexSong));\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  const onSelectSong = (index) => {\r\n    const audio = $(\"audio\");\r\n    let songSelected = getSong(index);\r\n    if (songSelected.id !== song.id) {\r\n      audio.setAttribute(\"src\", songSelected.path);\r\n      audio.play();\r\n      setSong(songSelected);\r\n      setIsPlaying(true);\r\n      startAnimation(true);\r\n      currentIndexSong = index;\r\n    }\r\n  };\r\n\r\n  const onChageData = (event) => {\r\n    const audio = $(\"audio\");\r\n    if (!isNaN(audio.duration)) {\r\n      const tempTime = (audio.duration * event.target.value) / 100;\r\n      audio.currentTime = tempTime;\r\n      if (isPlaying) {\r\n        audio.play();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onRandomSong = () => {\r\n    isRandom = !isRandom;\r\n    const btnRandom = $(\".btn-random\");\r\n    if (isRandom) {\r\n      btnRandom.classList.add(\"active\");\r\n    } else {\r\n      btnRandom.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  const onRepeatSong = () => {\r\n    isRepeat = !isRepeat;\r\n    const btnRepeat = $(\".btn-repeat\");\r\n    if (isRepeat) {\r\n      btnRepeat.classList.add(\"active\");\r\n    } else {\r\n      btnRepeat.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      <div className=\"dashboard\">\r\n        {/* dashboard-header */}\r\n        <div className=\"dashboard-header\">\r\n          <h4>Created by Van Phong Tran and Now playing:</h4>\r\n          <h2>\r\n            {song.name.length > 40 ? song.name.slice(0, 40) + \"...\" : song.name}\r\n          </h2>\r\n        </div>\r\n        {/* dashboard-image */}\r\n        <div className=\"dashboard-cd\">\r\n          <img src={song.image} alt=\"\" />\r\n        </div>\r\n        {/* dashboard-control */}\r\n        <div className=\"control\">\r\n          <div className=\"btn btn-repeat\" onClick={onRepeatSong}>\r\n            <i className=\"fas fa-redo\"></i>\r\n          </div>\r\n          <div className=\"btn btn-prev\" onClick={onPrevSong}>\r\n            <i className=\"fas fa-step-backward\"></i>\r\n          </div>\r\n          <div className=\"btn btn-toggle-play\" onClick={onTogglePlayAndPause}>\r\n            {isPlaying ? (\r\n              <i className=\"fas fa-pause icon-pause\" />\r\n            ) : (\r\n              <i className=\"fas fa-play icon-play\"></i>\r\n            )}\r\n          </div>\r\n          <div className=\"btn btn-next\" onClick={() => onNextSong(isRandom)}>\r\n            <i className=\"fas fa-step-forward\"></i>\r\n          </div>\r\n          <div className=\"btn btn-random\" onClick={onRandomSong}>\r\n            <i className=\"fas fa-random\"></i>\r\n          </div>\r\n        </div>\r\n        {/* input progress */}\r\n        <input\r\n          id=\"progress\"\r\n          className=\"progress\"\r\n          type=\"range\"\r\n          step=\"1\"\r\n          min=\"0\"\r\n          max=\"100\"\r\n          onChange={onChageData}\r\n        />\r\n        <div className=\"time\">\r\n          <span className=\"current-time\">00:00</span>\r\n          <span className=\"duration-time\">05:12</span>\r\n        </div>\r\n        {/* input audio */}\r\n        <audio id=\"audio\" src=\"\" />\r\n      </div>\r\n      {/* list-songs */}\r\n      <div className=\"list-songs\">\r\n        {data.map((itemSong, index) => {\r\n          return (\r\n            <div\r\n              onClick={() => onSelectSong(index)}\r\n              className={`item-song ${song.id === itemSong.id ? \"active\" : \"\"}`}\r\n              key={itemSong.id}\r\n            >\r\n              <div className=\"item-song-image\">\r\n                <img src={itemSong.links.images[0].url} alt=\"\" />\r\n              </div>\r\n              <div className=\"item-song-content\">\r\n                <h3 className=\"title\">\r\n                  {itemSong.name.length > 35\r\n                    ? itemSong.name.slice(0, 30) + \"...\"\r\n                    : itemSong.name}{\" \"}\r\n                  - {itemSong.id + 1}\r\n                </h3>\r\n                <p className=\"author\">{itemSong.author}</p>\r\n              </div>\r\n              <div className=\"item-song-action\">\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mp3;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Mp3 from \"./views/mp3\";\r\n\r\nconst App = () => {\r\n  return <Mp3 />;\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const ACTION_TYPES = {\r\n    LOGIN: 'LOGIN',\r\n    // ERROR\r\n    GET_ERRORS: 'GET_ERRORS',\r\n    CLEAR_ERRORS: 'CLEAR_ERRORS',\r\n\r\n};","import { ACTION_TYPES } from '../types'\r\n\r\nconst initialState = {\r\n    inforLogin: {}\r\n}\r\n\r\nconst LoginReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES.LOGIN:\r\n            return {\r\n                ...state,\r\n                inforLogin: action.inforLogin,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default LoginReducer;","import { combineReducers } from 'redux'\r\nimport LoginReducer from './login';\r\n\r\nconst appReducer = combineReducers({\r\n    LoginReducer,\r\n})\r\nconst rootReducer = (state, action) => {\r\n    return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nconst initialState = {}\r\n\r\nconst logger = createLogger({ diff: true, collapsed: true })\r\n\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk, logger))\r\n\r\nconsole.log('state Store--', store.getState())\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}