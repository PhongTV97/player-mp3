[{"D:\\Reactjs\\project-mp3\\project-mp3\\src\\index.js":"1","D:\\Reactjs\\project-mp3\\project-mp3\\src\\App.js":"2","D:\\Reactjs\\project-mp3\\project-mp3\\src\\reportWebVitals.js":"3","D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\store.js":"4","D:\\Reactjs\\project-mp3\\project-mp3\\src\\routes\\index.js":"5","D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\reducers\\rootReducer.js":"6","D:\\Reactjs\\project-mp3\\project-mp3\\src\\routes\\privateRoute.js":"7","D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\reducers\\login.js":"8","D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\login\\index.js":"9","D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\topics\\index.js":"10","D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\home\\index.js":"11","D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\types.js":"12","D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\actions\\login.js":"13","D:\\Reactjs\\project-mp3\\project-mp3\\src\\services\\index.js":"14","D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\actions\\error.js":"15","D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\mp3\\index.jsx":"16"},{"size":506,"mtime":1611159167362,"results":"17","hashOfConfig":"18"},{"size":141,"mtime":1660990137476,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":436,"mtime":1611158671947,"results":"21","hashOfConfig":"18"},{"size":720,"mtime":1611997566317,"results":"22","hashOfConfig":"18"},{"size":252,"mtime":1611158671939,"results":"23","hashOfConfig":"18"},{"size":468,"mtime":1612102394659,"results":"24","hashOfConfig":"18"},{"size":408,"mtime":1611158671934,"results":"25","hashOfConfig":"18"},{"size":700,"mtime":1618240440186,"results":"26","hashOfConfig":"18"},{"size":666,"mtime":1618240080230,"results":"27","hashOfConfig":"18"},{"size":971,"mtime":1618240649844,"results":"28","hashOfConfig":"18"},{"size":136,"mtime":1611158671955,"results":"29","hashOfConfig":"18"},{"size":409,"mtime":1618239824949,"results":"30","hashOfConfig":"18"},{"size":1960,"mtime":1611998228598,"results":"31","hashOfConfig":"18"},{"size":300,"mtime":1611158671920,"results":"32","hashOfConfig":"18"},{"size":7703,"mtime":1661009697383,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1kv71tl",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},"D:\\Reactjs\\project-mp3\\project-mp3\\src\\index.js",[],["69","70"],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\App.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\reportWebVitals.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\store.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\routes\\index.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\reducers\\rootReducer.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\routes\\privateRoute.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\reducers\\login.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\login\\index.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\topics\\index.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\home\\index.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\types.js",[],["71","72"],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\actions\\login.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\services\\index.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\redux\\actions\\error.js",[],"D:\\Reactjs\\project-mp3\\project-mp3\\src\\views\\mp3\\index.jsx",["73"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport data from \"./songs.json\";\r\nimport moment from \"moment\";\r\n\r\nlet currentIndexSong = 0;\r\nlet isRepeat = false;\r\nlet isRandom = false;\r\nlet idSongPlayed = [];\r\nconst $ = document.querySelector.bind(document);\r\nlet cdThum;\r\n\r\nconst Mp3 = () => {\r\n  const getSong = (index) => {\r\n    return {\r\n      image: data[index].links.images[0].url,\r\n      name: data[index].name,\r\n      author: data[index].author,\r\n      path: data[index].url,\r\n      id: data[index].id,\r\n    };\r\n  };\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [song, setSong] = useState(getSong(0));\r\n\r\n  const formatSenconds = (seconds) => {\r\n    seconds = parseInt(seconds); //because moment js dont know to handle number in string format\r\n    let format =\r\n      moment\r\n        .duration(seconds, \"seconds\")\r\n        .minutes()\r\n        .toString()\r\n        .padStart(2, \"0\") +\r\n      \":\" +\r\n      moment.duration(seconds, \"seconds\").seconds().toString().padStart(2, \"0\");\r\n    return format;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const audio = $(\"audio\");\r\n    const progress = $(\"#progress\");\r\n    const currentTimeSpan = $(\".current-time\");\r\n    const durationTimeSpan = $(\".duration-time\");\r\n    audio.src = song.path;\r\n    startAnimation();\r\n    audio.ontimeupdate = () => {\r\n      durationTimeSpan.textContent = formatSenconds(audio.duration || 300);\r\n      if (!isNaN(audio.duration)) {\r\n        if (audio.currentTime >= audio.duration) {\r\n          console.log(\"isRepeat\", isRepeat);\r\n          if (!isRepeat) {\r\n            onNextSong(isRandom);\r\n            progress.value = 0;\r\n            currentTimeSpan.textContent = \"00:00\";\r\n          } else {\r\n            audio.play();\r\n          }\r\n        } else {\r\n          progress.value = (audio.currentTime / audio.duration) * 100;\r\n          currentTimeSpan.textContent = formatSenconds(audio.currentTime);\r\n        }\r\n      } else {\r\n        progress.value = 0;\r\n        currentTimeSpan.textContent = \"00:00\";\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const startAnimation = (check) => {\r\n    if (check === undefined) {\r\n      let dashboardCD = $(\".dashboard-cd\");\r\n      cdThum = dashboardCD.animate([{ transform: \"rotate(360deg)\" }], {\r\n        duration: 10000,\r\n        iterations: Infinity,\r\n      });\r\n    }\r\n    if (!check) cdThum.pause();\r\n    else cdThum.play();\r\n  };\r\n\r\n  const onTogglePlayAndPause = () => {\r\n    const audio = $(\"audio\");\r\n    if (!isNaN(audio.duration)) {\r\n      if (!isPlaying) {\r\n        audio.play();\r\n        startAnimation(true);\r\n      } else {\r\n        audio.pause();\r\n        startAnimation(false);\r\n      }\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  };\r\n\r\n  const onNextSong = (isRandom) => {\r\n    if (idSongPlayed.length === data.length) idSongPlayed = [];\r\n    if (isRandom) {\r\n      // idSongPlayed\r\n      do {\r\n        currentIndexSong = Math.floor(Math.random() * 85);\r\n      } while (idSongPlayed.includes(currentIndexSong));\r\n    } else {\r\n      currentIndexSong++;\r\n    }\r\n    const audio = $(\"audio\");\r\n    if (currentIndexSong >= data.length) currentIndexSong = 0;\r\n    idSongPlayed.push(getSong(currentIndexSong).id);\r\n    audio.setAttribute(\"src\", getSong(currentIndexSong).path);\r\n    audio.play();\r\n    setSong(getSong(currentIndexSong));\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  const onPrevSong = () => {\r\n    const audio = $(\"audio\");\r\n    currentIndexSong--;\r\n    if (currentIndexSong < 0) currentIndexSong = data.length - 1;\r\n    audio.setAttribute(\"src\", getSong(currentIndexSong).path);\r\n    audio.play();\r\n    setSong(getSong(currentIndexSong));\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  const onSelectSong = (index) => {\r\n    const audio = $(\"audio\");\r\n    let songSelected = getSong(index);\r\n    if (songSelected.id !== song.id) {\r\n      audio.setAttribute(\"src\", songSelected.path);\r\n      audio.play();\r\n      setSong(songSelected);\r\n      setIsPlaying(true);\r\n      startAnimation(true);\r\n      currentIndexSong = index;\r\n    }\r\n  };\r\n\r\n  const onChageData = (event) => {\r\n    const audio = $(\"audio\");\r\n    if (!isNaN(audio.duration)) {\r\n      const tempTime = (audio.duration * event.target.value) / 100;\r\n      audio.currentTime = tempTime;\r\n      if (isPlaying) {\r\n        audio.play();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onRandomSong = () => {\r\n    isRandom = !isRandom;\r\n    const btnRandom = $(\".btn-random\");\r\n    if (isRandom) {\r\n      btnRandom.classList.add(\"active\");\r\n    } else {\r\n      btnRandom.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  const onRepeatSong = () => {\r\n    isRepeat = !isRepeat;\r\n    const btnRepeat = $(\".btn-repeat\");\r\n    if (isRepeat) {\r\n      btnRepeat.classList.add(\"active\");\r\n    } else {\r\n      btnRepeat.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      <div className=\"dashboard\">\r\n        {/* dashboard-header */}\r\n        <div className=\"dashboard-header\">\r\n          <h4>Created by Van Phong Tran and Now playing:</h4>\r\n          <h2>\r\n            {song.name.length > 40 ? song.name.slice(0, 40) + \"...\" : song.name}\r\n          </h2>\r\n        </div>\r\n        {/* dashboard-image */}\r\n        <div className=\"dashboard-cd\">\r\n          <img src={song.image} alt=\"\" />\r\n        </div>\r\n        {/* dashboard-control */}\r\n        <div className=\"control\">\r\n          <div className=\"btn btn-repeat\" onClick={onRepeatSong}>\r\n            <i className=\"fas fa-redo\"></i>\r\n          </div>\r\n          <div className=\"btn btn-prev\" onClick={onPrevSong}>\r\n            <i className=\"fas fa-step-backward\"></i>\r\n          </div>\r\n          <div className=\"btn btn-toggle-play\" onClick={onTogglePlayAndPause}>\r\n            {isPlaying ? (\r\n              <i className=\"fas fa-pause icon-pause\" />\r\n            ) : (\r\n              <i className=\"fas fa-play icon-play\"></i>\r\n            )}\r\n          </div>\r\n          <div className=\"btn btn-next\" onClick={() => onNextSong(isRandom)}>\r\n            <i className=\"fas fa-step-forward\"></i>\r\n          </div>\r\n          <div className=\"btn btn-random\" onClick={onRandomSong}>\r\n            <i className=\"fas fa-random\"></i>\r\n          </div>\r\n        </div>\r\n        {/* input progress */}\r\n        <input\r\n          id=\"progress\"\r\n          className=\"progress\"\r\n          type=\"range\"\r\n          step=\"1\"\r\n          min=\"0\"\r\n          max=\"100\"\r\n          onChange={onChageData}\r\n        />\r\n        <div className=\"time\">\r\n          <span className=\"current-time\">00:00</span>\r\n          <span className=\"duration-time\">05:12</span>\r\n        </div>\r\n        {/* input audio */}\r\n        <audio id=\"audio\" src=\"\" />\r\n      </div>\r\n      {/* list-songs */}\r\n      <div className=\"list-songs\">\r\n        {data.map((itemSong, index) => {\r\n          return (\r\n            <div\r\n              onClick={() => onSelectSong(index)}\r\n              className={`item-song ${song.id === itemSong.id ? \"active\" : \"\"}`}\r\n              key={itemSong.id}\r\n            >\r\n              <div className=\"item-song-image\">\r\n                <img src={itemSong.links.images[0].url} alt=\"\" />\r\n              </div>\r\n              <div className=\"item-song-content\">\r\n                <h3 className=\"title\">\r\n                  {itemSong.name.length > 35\r\n                    ? itemSong.name.slice(0, 30) + \"...\"\r\n                    : itemSong.name}{\" \"}\r\n                  - {itemSong.id + 1}\r\n                </h3>\r\n                <p className=\"author\">{itemSong.author}</p>\r\n              </div>\r\n              <div className=\"item-song-action\">\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mp3;\r\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":67,"column":6,"nodeType":"82","endLine":67,"endColumn":8,"suggestions":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],["84"],["85"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onNextSong' and 'song.path'. Either include them or remove the dependency array.","ArrayExpression",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [onNextSong, song.path]",{"range":"89","text":"90"},[2051,2053],"[onNextSong, song.path]"]